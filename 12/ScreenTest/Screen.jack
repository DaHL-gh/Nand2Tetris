// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static int width, height; 
	static Array screen;
	static boolean color;

	/** Initializes the Screen. */
	function void init() {
		let width = 512;
		let height = 256;
		let screen = 16384;
		let color = true;

		return;
	}

	/** Erases the entire screen. */
	function void clearScreen() {
		var int i;

		let i = 8192;
		while (i > 0) {
			let screen[i] = 0;
			let i = i - 1;
		}
		return;
	}

	/** Sets the current color, to be used for all subsequent drawXXX commands.
	 *  Black is represented by true, white by false. */
	function void setColor(boolean b) {
		let color = b;
		return;
	}

	/** Draws the (x,y) pixel, using the current color. */
	function void drawPixel(int x, int y) {
		var int n, mask, address;

		if ((x > width) | (y > height)) { do Sys.error(1); }

		let address = (y * 32) + (x / 16);

		let mask = 1;
		let n = x & 15;
		while (n > 0) {
			let mask = mask + mask;
			let n = n - 1;
		}

		if(color){
			let screen[address] = screen[address] | mask;
		}else{
			let screen[address] = screen[address] & ~mask;
		}
		return;
	}

	/** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
	function void drawLine(int x1, int y1, int x2, int y2) {
		var int x, y, dx, dy, diff, m_new;
		var boolean negX, negY;

		let dx = x2 - x1;
		let dy = y2 - y1;

		let x = x1;
		let y = y1;
		let diff = 0;
		while (x < x2) {

			if (diff > 0) {
				let y = y + 1;
				let diff = diff - dx - dx;
			}
			let diff = diff + dy + dy;

			do Screen.drawPixel(x, y);
			
			let x = x + 1;
		}
		return;
	}

	/** Draws a filled rectangle whose top left corner is (x1, y1)
	 * and bottom right corner is (x2,y2), using the current color. */
	function void drawRectangle(int x1, int y1, int x2, int y2) {
		return;
	}

	/** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
	function void drawCircle(int x, int y, int r) {
		return;
	}
}
