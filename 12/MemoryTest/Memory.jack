// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static Array ram;
	static Array freeList;
	static Array heap;

	/** Initializes the class. */
	function void init() {
		let ram = 0;

		let heap = 2048;
		let freeList = 2048;
		let freeList[0] = -1;
		let freeList[1] = 14334;

		return;
	}

	/** Returns the RAM value at the given address. */
	function int peek(int address) {
		return ram[address];
	}

	/** Sets the RAM value at the given address to the given value. */
	function void poke(int address, int value) {
		let ram[address] = value;
		return;
	}

	/** Finds an available RAM block of the given size and returns
	 *  a reference to its base address. */
	function int alloc(int size) {
		var Array curr, newBlock, prev;
		var int nextAddr, len;

		if (size < 0) { do Sys.error(3); }

		let curr = freeList;
		let prev = -1;
		while (~(curr = -1)) { // no block next
			let nextAddr = curr[0];
			let len = curr[1];

			if (~(len < (size + 2))) { // len >= size + 2
				let newBlock = curr + size + 2;
				let newBlock[0] = curr[0];
				let newBlock[1] = curr[1] - size - 2;
				let curr[0] = -1;
				let curr[1] = size;

				if (prev = -1) {
					let freeList = newBlock;
				} else {
					let prev[0] = newBlock;
				}
				return curr + 2;
			}
			if (len = size) { // len = size, no new block
				let curr[0] = -1;

				if (prev = -1) {
					let freeList = nextAddr;
				} else {
					let prev[0] = nextAddr;
				}
				return curr + 2;
			}

			let prev = curr;
			let curr = nextAddr;
		}
		do Sys.error(2);
		return 0;
	}

	/** De-allocates the given object (cast as an array) by making
	 *  it available for future allocations. */
	function void deAlloc(Array object) {
		var Array block;
		let block = object - 2;

		let block[0] = freeList;
		let freeList = block;

		return;
	}    
}
